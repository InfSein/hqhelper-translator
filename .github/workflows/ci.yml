name: .NET Build å’Œ Release

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/install.sh | bash
    
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --configuration Release

      - name: Publish project
        run: |
          dotnet publish --configuration Release --output ./publish -p:PublishProfile=Properties/PublishProfiles/FolderProfile.pubxml

      - name: Get version from csproj
        id: version
        run: |
          $csprojPath = "./hqhelper-translator/hqhelper-translator.csproj"
          if (Test-Path $csprojPath) {
              $version = (Select-String -Path $csprojPath -Pattern '<Version>(.*?)</Version>' | ForEach-Object { $_.Matches.Groups[1].Value }).Trim()
              echo "VERSION=$version" >> $GITHUB_ENV
          } else {
              Write-Error "The csproj file was not found at the expected location: $csprojPath"
          }

      - name: Package build files into zip
        run: |
          Compress-Archive -Path ./publish/* -DestinationPath ./HqHelperTranslator.zip

      - name: Check if release already exists
        id: release_check
        run: |
          $release_exists = (gh release list --json tagName --jq ".[] | select(.tagName == \"v${{ env.VERSION }}\") | .tagName") -ne $null
          echo "Release exists: $release_exists"
          echo "RELEASE_EXISTS=$release_exists" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or update GitHub release
        run: |
          if [ -z "${{ env.RELEASE_EXISTS }}" ]; then
            echo "Creating new release..."
            gh release create "v${{ env.VERSION }}" ./HqHelperTranslator.zip --title "Release v${{ env.VERSION }}" --notes "Automated release"
          else
            echo "Release exists, updating attachments..."
            gh release upload "v${{ env.VERSION }}" ./HqHelperTranslator.zip --replace
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
